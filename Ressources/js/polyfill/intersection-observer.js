/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.
 * https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document
*/
(function(){"use strict";if(typeof window!=="object"){return}if("IntersectionObserver"in window&&"IntersectionObserverEntry"in window&&"intersectionRatio"in window.IntersectionObserverEntry.prototype){if(!("isIntersecting"in window.IntersectionObserverEntry.prototype)){Object.defineProperty(window.IntersectionObserverEntry.prototype,"isIntersecting",{get:function(){return this.intersectionRatio>0}})}return}var h=window.document;var e=[];function IntersectionObserverEntry(t){this.time=t.time;this.target=t.target;this.rootBounds=t.rootBounds;this.boundingClientRect=t.boundingClientRect;this.intersectionRect=t.intersectionRect||getEmptyRect();this.isIntersecting=!!t.intersectionRect;var e=this.boundingClientRect;var n=e.width*e.height;var r=this.intersectionRect;var i=r.width*r.height;if(n){this.intersectionRatio=Number((i/n).toFixed(4))}else{this.intersectionRatio=this.isIntersecting?1:0}}function IntersectionObserver(t,e){var n=e||{};if(typeof t!="function"){throw new Error("callback must be a function")}if(n.root&&n.root.nodeType!=1){throw new Error("root must be an Element")}this._checkForIntersections=throttle(this._checkForIntersections.bind(this),this.THROTTLE_TIMEOUT);this._callback=t;this._observationTargets=[];this._queuedEntries=[];this._rootMarginValues=this._parseRootMargin(n.rootMargin);this.thresholds=this._initThresholds(n.threshold);this.root=n.root||null;this.rootMargin=this._rootMarginValues.map(function(t){return t.value+t.unit}).join(" ")}IntersectionObserver.prototype.THROTTLE_TIMEOUT=100;IntersectionObserver.prototype.POLL_INTERVAL=null;IntersectionObserver.prototype.USE_MUTATION_OBSERVER=true;IntersectionObserver.prototype.observe=function(e){var t=this._observationTargets.some(function(t){return t.element==e});if(t){return}if(!(e&&e.nodeType==1)){throw new Error("target must be an Element")}this._registerInstance();this._observationTargets.push({element:e,entry:null});this._monitorIntersections();this._checkForIntersections()};IntersectionObserver.prototype.unobserve=function(e){this._observationTargets=this._observationTargets.filter(function(t){return t.element!=e});if(!this._observationTargets.length){this._unmonitorIntersections();this._unregisterInstance()}};IntersectionObserver.prototype.disconnect=function(){this._observationTargets=[];this._unmonitorIntersections();this._unregisterInstance()};IntersectionObserver.prototype.takeRecords=function(){var t=this._queuedEntries.slice();this._queuedEntries=[];return t};IntersectionObserver.prototype._initThresholds=function(t){var e=t||[0];if(!Array.isArray(e))e=[e];return e.sort().filter(function(t,e,n){if(typeof t!="number"||isNaN(t)||t<0||t>1){throw new Error("threshold must be a number between 0 and 1 inclusively")}return t!==n[e-1]})};IntersectionObserver.prototype._parseRootMargin=function(t){var e=t||"0px";var n=e.split(/\s+/).map(function(t){var e=/^(-?\d*\.?\d+)(px|%)$/.exec(t);if(!e){throw new Error("rootMargin must be specified in pixels or percent")}return{value:parseFloat(e[1]),unit:e[2]}});n[1]=n[1]||n[0];n[2]=n[2]||n[0];n[3]=n[3]||n[1];return n};IntersectionObserver.prototype._monitorIntersections=function(){if(!this._monitoringIntersections){this._monitoringIntersections=true;if(this.POLL_INTERVAL){this._monitoringInterval=setInterval(this._checkForIntersections,this.POLL_INTERVAL)}else{addEvent(window,"resize",this._checkForIntersections,true);addEvent(h,"scroll",this._checkForIntersections,true);if(this.USE_MUTATION_OBSERVER&&"MutationObserver"in window){this._domObserver=new MutationObserver(this._checkForIntersections);this._domObserver.observe(h,{attributes:true,childList:true,characterData:true,subtree:true})}}}};IntersectionObserver.prototype._unmonitorIntersections=function(){if(this._monitoringIntersections){this._monitoringIntersections=false;clearInterval(this._monitoringInterval);this._monitoringInterval=null;removeEvent(window,"resize",this._checkForIntersections,true);removeEvent(h,"scroll",this._checkForIntersections,true);if(this._domObserver){this._domObserver.disconnect();this._domObserver=null}}};IntersectionObserver.prototype._checkForIntersections=function(){var c=this._rootIsInDom();var h=c?this._getRootRect():getEmptyRect();this._observationTargets.forEach(function(t){var e=t.element;var n=getBoundingClientRect(e);var r=this._rootContainsTarget(e);var i=t.entry;var o=c&&r&&this._computeTargetAndRootIntersection(e,h);var s=t.entry=new IntersectionObserverEntry({time:now(),target:e,boundingClientRect:n,rootBounds:h,intersectionRect:o});if(!i){this._queuedEntries.push(s)}else if(c&&r){if(this._hasCrossedThreshold(i,s)){this._queuedEntries.push(s)}}else{if(i&&i.isIntersecting){this._queuedEntries.push(s)}}},this);if(this._queuedEntries.length){this._callback(this.takeRecords(),this)}};IntersectionObserver.prototype._computeTargetAndRootIntersection=function(t,e){if(window.getComputedStyle(t).display=="none")return;var n=getBoundingClientRect(t);var r=n;var i=getParentNode(t);var o=false;while(!o){var s=null;var c=i.nodeType==1?window.getComputedStyle(i):{};if(c.display=="none")return;if(i==this.root||i==h){o=true;s=e}else{if(i!=h.body&&i!=h.documentElement&&c.overflow!="visible"){s=getBoundingClientRect(i)}}if(s){r=computeRectIntersection(s,r);if(!r)break}i=getParentNode(i)}return r};IntersectionObserver.prototype._getRootRect=function(){var t;if(this.root){t=getBoundingClientRect(this.root)}else{var e=h.documentElement;var n=h.body;t={top:0,left:0,right:e.clientWidth||n.clientWidth,width:e.clientWidth||n.clientWidth,bottom:e.clientHeight||n.clientHeight,height:e.clientHeight||n.clientHeight}}return this._expandRectByRootMargin(t)};IntersectionObserver.prototype._expandRectByRootMargin=function(n){var t=this._rootMarginValues.map(function(t,e){return t.unit=="px"?t.value:t.value*(e%2?n.width:n.height)/100});var e={top:n.top-t[0],right:n.right+t[1],bottom:n.bottom+t[2],left:n.left-t[3]};e.width=e.right-e.left;e.height=e.bottom-e.top;return e};IntersectionObserver.prototype._hasCrossedThreshold=function(t,e){var n=t&&t.isIntersecting?t.intersectionRatio||0:-1;var r=e.isIntersecting?e.intersectionRatio||0:-1;if(n===r)return;for(var i=0;i<this.thresholds.length;i++){var o=this.thresholds[i];if(o==n||o==r||o<n!==o<r){return true}}};IntersectionObserver.prototype._rootIsInDom=function(){return!this.root||containsDeep(h,this.root)};IntersectionObserver.prototype._rootContainsTarget=function(t){return containsDeep(this.root||h,t)};IntersectionObserver.prototype._registerInstance=function(){if(e.indexOf(this)<0){e.push(this)}};IntersectionObserver.prototype._unregisterInstance=function(){var t=e.indexOf(this);if(t!=-1)e.splice(t,1)};function now(){return window.performance&&performance.now&&performance.now()}function throttle(t,e){var n=null;return function(){if(!n){n=setTimeout(function(){t();n=null},e)}}}function addEvent(t,e,n,r){if(typeof t.addEventListener=="function"){t.addEventListener(e,n,r||false)}else if(typeof t.attachEvent=="function"){t.attachEvent("on"+e,n)}}function removeEvent(t,e,n,r){if(typeof t.removeEventListener=="function"){t.removeEventListener(e,n,r||false)}else if(typeof t.detatchEvent=="function"){t.detatchEvent("on"+e,n)}}function computeRectIntersection(t,e){var n=Math.max(t.top,e.top);var r=Math.min(t.bottom,e.bottom);var i=Math.max(t.left,e.left);var o=Math.min(t.right,e.right);var s=o-i;var c=r-n;return s>=0&&c>=0&&{top:n,bottom:r,left:i,right:o,width:s,height:c}}function getBoundingClientRect(t){var e;try{e=t.getBoundingClientRect()}catch(t){}if(!e)return getEmptyRect();if(!(e.width&&e.height)){e={top:e.top,right:e.right,bottom:e.bottom,left:e.left,width:e.right-e.left,height:e.bottom-e.top}}return e}function getEmptyRect(){return{top:0,bottom:0,left:0,right:0,width:0,height:0}}function containsDeep(t,e){var n=e;while(n){if(n==t)return true;n=getParentNode(n)}return false}function getParentNode(t){var e=t.parentNode;if(e&&e.nodeType==11&&e.host){return e.host}if(e&&e.assignedSlot){return e.assignedSlot.parentNode}return e}window.IntersectionObserver=IntersectionObserver;window.IntersectionObserverEntry=IntersectionObserverEntry})();